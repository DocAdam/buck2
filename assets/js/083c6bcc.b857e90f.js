"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1367],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>m,MDXProvider:()=>u,mdx:()=>h,useMDXComponents:()=>s,withMDXComponents:()=>p});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var m=a.createContext({}),p=function(e){return function(t){var n=s(t.components);return a.createElement(e,r({},t,{components:n}))}},s=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},_=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),p=s(n),u=l,c=p["".concat(o,".").concat(u)]||p[u]||x[u]||r;return n?a.createElement(c,i(i({ref:t},m),{},{components:n})):a.createElement(c,i({ref:t},m))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=_;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:l,o[1]=i;for(var m=2;m<r;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}_.displayName="MDXCreateElement"},2047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>s,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var a=n(87462),l=(n(67294),n(3905));const r={id:"build"},o="build",i={unversionedId:"api/build/build",id:"api/build/build",title:"build",description:"CommandExecutorConfig",source:"@site/../docs/api/build/build.generated.md",sourceDirName:"api/build",slug:"/api/build/build",permalink:"/docs/api/build/build",draft:!1,tags:[],version:"current",frontMatter:{id:"build"},sidebar:"manualSidebar",previous:{title:"Artifact",permalink:"/docs/api/build/Artifact"},next:{title:"cmd_args",permalink:"/docs/api/build/cmd_args"}},d={},m=[{value:"CommandExecutorConfig",id:"commandexecutorconfig",level:2},{value:"Details",id:"details",level:4},{value:"cmd_args",id:"cmd_args",level:2},{value:"dedupe",id:"dedupe",level:2},{value:"get_base_path",id:"get_base_path",level:2},{value:"get_cell_name",id:"get_cell_name",level:2},{value:"glob",id:"glob",level:2},{value:"host_info",id:"host_info",level:2},{value:"implicit_package_symbol",id:"implicit_package_symbol",level:2},{value:"load_symbols",id:"load_symbols",level:2},{value:"oncall",id:"oncall",level:2},{value:"package",id:"package",level:2},{value:"package_name",id:"package_name",level:2},{value:"provider",id:"provider",level:2},{value:"read_config",id:"read_config",level:2},{value:"read_package_value",id:"read_package_value",level:2},{value:"Details",id:"details-1",level:4},{value:"read_root_config",id:"read_root_config",level:2},{value:"regex_match",id:"regex_match",level:2},{value:"repository_name",id:"repository_name",level:2},{value:"rule",id:"rule",level:2},{value:"rule_exists",id:"rule_exists",level:2},{value:"select",id:"select",level:2},{value:"select_equal_internal",id:"select_equal_internal",level:2},{value:"select_map",id:"select_map",level:2},{value:"select_test",id:"select_test",level:2},{value:"sha256",id:"sha256",level:2},{value:"transition",id:"transition",level:2},{value:"transitive_set",id:"transitive_set",level:2},{value:"warning",id:"warning",level:2},{value:"write_package_value",id:"write_package_value",level:2}],p={toc:m};function s(e){let{components:t,...n}=e;return(0,l.mdx)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"build"},"build"),(0,l.mdx)("h2",{id:"commandexecutorconfig"},"CommandExecutorConfig"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def CommandExecutorConfig(\n    local_enabled: bool.type,\n    remote_enabled: bool.type,\n    *,\n    remote_cache_enabled: [None, bool.type] = None,\n    remote_execution_properties: "" = None,\n    remote_execution_action_key: "" = None,\n    remote_execution_max_input_files_mebibytes: [None, int.type] = None,\n    remote_execution_queue_time_threshold_s: [None, int.type] = None,\n    remote_execution_use_case: "" = None,\n    use_limited_hybrid: bool.type = None,\n    allow_limited_hybrid_fallbacks: bool.type = None,\n    allow_hybrid_fallbacks_on_failure: bool.type = None,\n    use_windows_path_separators: bool.type = None,\n    allow_cache_uploads: bool.type = None,\n    max_cache_upload_mebibytes: [None, int.type] = None,\n    experimental_low_pass_filter: bool.type = None,\n    remote_output_paths: [None, str.type] = None\n) -> ""\n')),(0,l.mdx)("p",null,"Contains configurations for how actions should be executed"),(0,l.mdx)("h4",{id:"details"},"Details"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"local_enabled")," : Whether to use local execution for this execution platform.\nIf both remote_enabled and local_enabled are ",(0,l.mdx)("inlineCode",{parentName:"li"},"True"),", we will use the hybrid executor"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_enabled"),": Whether to use remote execution for this execution platform"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_cache_enabled"),": Whether to query RE caches"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_execution_properties"),": Properties for remote execution for this platform"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_execution_action_key"),": A component to inject into the action key\nThis should typically used to inject variability into the action key so that\nit's different across e.g. build modes (RE uses the action key for things like expected memory utilization)"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_execution_max_input_files_mebibytes"),": The maximum input file size (in bytes) that remote execution can support"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_execution_queue_time_threshold_s"),": The maximum time in seconds we are willing to wait\nin the RE queue for remote execution to start running our action"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_execution_use_case"),": The use case to use when communicating with RE"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"use_limited_hybrid"),": Whether to use the limited hybrid executor"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"allow_limited_hybrid_fallbacks"),": Whether to allow fallbacks"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"allow_hybrid_fallbacks_on_failure"),": Whether to allow fallbacks when the result is failure (i.e. the command failed on the primary, but the infra worked)"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"use_windows_path_separators"),": Whether to use Windows path separators in command line arguments"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"allow_cache_uploads"),": Whether to upload local actions to the RE cache"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"max_cache_upload_mebibytes"),": Maximum size to upload in cache uploads"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"experimental_low_pass_filter"),": Whether to use the experimental low pass filter"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"remote_output_paths"),": How to express output paths to RE")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"cmd_args"},"cmd_args"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args(\n    *args,\n    delimiter: [None, str.type] = None,\n    format: [None, str.type] = None,\n    prepend: [None, str.type] = None,\n    quote: [None, str.type] = None\n) -> "cmd_args"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"dedupe"},"dedupe"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def dedupe(val: "") -> ""\n')),(0,l.mdx)("p",null,"Remove duplicates in a list. Uses identity of value (pointer), rather than by equality."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"get_base_path"},"get_base_path"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def get_base_path() -> str.type\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"get_cell_name"},"get_cell_name"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def get_cell_name() -> str.type\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"glob"},"glob"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def glob(include: [str.type], *, exclude: [None, [str.type]] = None) -> ""\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"host_info"},"host_info"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def host_info() -> ""\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"implicit_package_symbol"},"implicit_package_symbol"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def implicit_package_symbol(name: str.type, default: [None, ""] = None) -> ""\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"load_symbols"},"load_symbols"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def load_symbols(symbols: {"": ""}) -> None\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"oncall"},"oncall"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def oncall(name: str.type) -> None\n")),(0,l.mdx)("p",null,"Called in a ",(0,l.mdx)("inlineCode",{parentName:"p"},"BUCK")," file to declare the oncall contact details for all the targets defined. Must be called at most once, before any targets have been declared. Errors if called from a ",(0,l.mdx)("inlineCode",{parentName:"p"},".bzl")," file."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"package"},"package"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def package(\n    *,\n    inherit: bool.type = None,\n    visibility: [str.type] = None,\n    within_view: [str.type] = None\n) -> None\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"package_name"},"package_name"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def package_name() -> str.type\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"provider"},"provider"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def provider(doc: str.type = None, fields: [[str.type], {str.type: str.type}]) -> "provider_callable"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"read_config"},"read_config"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def read_config(section: str.type, key: str.type, default: [None, ""] = None) -> ""\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"read_package_value"},"read_package_value"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def read_package_value(key: str.type) -> ""\n')),(0,l.mdx)("p",null,"Read value specified in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," file."),(0,l.mdx)("h4",{id:"details-1"},"Details"),(0,l.mdx)("p",null,"Returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"None")," if value is not set."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"read_root_config"},"read_root_config"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def read_root_config(section: str.type, key: str.type, default: [None, str.type] = None) -> [None, str.type]\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"regex_match"},"regex_match"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def regex_match(regex: str.type, str: str.type) -> bool.type\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"repository_name"},"repository_name"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def repository_name() -> str.type\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"rule"},"rule"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def rule(\n    *,\n    impl: "",\n    attrs: {str.type: "attribute"},\n    cfg: [None, ""] = None,\n    doc: str.type = None,\n    is_configuration_rule: bool.type = None,\n    is_toolchain_rule: bool.type = None\n) -> ""\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"rule_exists"},"rule_exists"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def rule_exists(name: str.type) -> bool.type\n")),(0,l.mdx)("p",null,'This should be called "target exists", not "rule exists" (if this should exist at all).'),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"select"},"select"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def select(d: "") -> "selector"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"select_equal_internal"},"select_equal_internal"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def select_equal_internal(left: "", right: "") -> bool.type\n')),(0,l.mdx)("p",null,"Tests that two selects are equal to each other. For testing use only."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"select_map"},"select_map"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def select_map(d: "", func: "") -> ""\n')),(0,l.mdx)("p",null,"Applies a mapping function to a selector. See ","[StarlarkSelector::select_map]","."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"select_test"},"select_test"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def select_test(d: "", func: "") -> bool.type\n')),(0,l.mdx)("p",null,"Applies a test function to a selector. See ","[StarlarkSelector::select_test]","."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"sha256"},"sha256"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def sha256(val: str.type) -> str.type\n")),(0,l.mdx)("p",null,"Computes a sha256 digest for a string. Returns the hex representation of the digest."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"transition"},"transition"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def transition(\n    *,\n    impl: "",\n    refs: {str.type: str.type},\n    attrs: [None, [str.type]] = None,\n    split: bool.type = None\n) -> "transition"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"transitive_set"},"transitive_set"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def transitive_set(args_projections: [None, {str.type: ""}] = None, json_projections: [None, {str.type: ""}] = None, reductions: [None, {str.type: ""}] = None) -> "transitive_set_definition"\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"warning"},"warning"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"def warning(x: str.type) -> None\n")),(0,l.mdx)("p",null,"Produce a warning."),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"write_package_value"},"write_package_value"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def write_package_value(\n    key: str.type,\n    value: "",\n    *,\n    overwrite: bool.type = None\n) -> None\n')),(0,l.mdx)("p",null,"Set the value to be accessible in the nested ",(0,l.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files."))}s.isMDXComponent=!0}}]);