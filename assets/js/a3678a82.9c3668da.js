"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8410],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>s,MDXProvider:()=>u,mdx:()=>x,useMDXComponents:()=>d,withMDXComponents:()=>c});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},i.apply(this,arguments)}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){return function(t){var r=d(t.components);return a.createElement(e,i({},t,{components:r}))}},d=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=d(r),u=n,m=c["".concat(o,".").concat(u)]||c[u]||f[u]||i;return r?a.createElement(m,l(l({ref:t},s),{},{components:r})):a.createElement(m,l({ref:t},s))}));function x(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},15357:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=r(87462),n=(r(67294),r(3905));const i={id:"Artifact"},o="Artifact",l={unversionedId:"api/build/Artifact",id:"api/build/Artifact",title:"Artifact",description:"A single input or output for an action",source:"@site/../docs/api/build/Artifact.generated.md",sourceDirName:"api/build",slug:"/api/build/Artifact",permalink:"/docs/api/build/Artifact",draft:!1,tags:[],version:"current",frontMatter:{id:"Artifact"},sidebar:"manualSidebar",previous:{title:"string",permalink:"/docs/api/starlark/string"},next:{title:"build",permalink:"/docs/api/build/build"}},p={},s=[{value:"as_output",id:"as_output",level:2},{value:"basename",id:"basename",level:2},{value:"extension",id:"extension",level:2},{value:"is_source",id:"is_source",level:2},{value:"owner",id:"owner",level:2},{value:"project",id:"project",level:2},{value:"short_path",id:"short_path",level:2},{value:"without_associated_artifacts",id:"without_associated_artifacts",level:2}],c={toc:s};function d(e){let{components:t,...r}=e;return(0,n.mdx)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"artifact"},"Artifact"),(0,n.mdx)("p",null,"A single input or output for an action"),(0,n.mdx)("h2",{id:"as_output"},"as_output"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def as_output() -> "output_artifact"\n')),(0,n.mdx)("p",null,"Returns a ",(0,n.mdx)("inlineCode",{parentName:"p"},"StarlarkOutputArtifact")," instance, or fails if the artifact is either an ",(0,n.mdx)("inlineCode",{parentName:"p"},"Artifact"),", or is a bound ",(0,n.mdx)("inlineCode",{parentName:"p"},"Artifact")," (You cannot bind twice)"),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"basename"},"basename"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"basename: str.type\n")),(0,n.mdx)("p",null,"The base name of this artifact. e.g. for an artifact at ",(0,n.mdx)("inlineCode",{parentName:"p"},"foo/bar"),", this is ",(0,n.mdx)("inlineCode",{parentName:"p"},"bar")),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"extension"},"extension"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"extension: str.type\n")),(0,n.mdx)("p",null,"The file extension of this artifact. e.g. for an artifact at foo/bar.sh, this is ",(0,n.mdx)("inlineCode",{parentName:"p"},".sh"),". If no extension is present, ",(0,n.mdx)("inlineCode",{parentName:"p"},'""')," is returned."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"is_source"},"is_source"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"is_source: bool.type\n")),(0,n.mdx)("p",null,"Whether the artifact represents a source file"),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"owner"},"owner"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'owner: [None, "label"]\n')),(0,n.mdx)("p",null,"The ",(0,n.mdx)("inlineCode",{parentName:"p"},"Label")," of the rule that originally created this artifact. May also be None in the case of source files, or if the artifact has not be used in an action, or if the action was not created by a rule."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"project"},"project"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def project(path: str.type, *, hide_prefix: bool.type = None) -> "artifact"\n')),(0,n.mdx)("p",null,'Create an artifact that lives at path relative from this artifact. For example, if artifact foo is a directory containing a file bar, then foo.project("bar") yields the file bar. It is possible for projected artifacts to hide the prefix in order to have the short name of the resulting artifact only contain the projected path, by passing hide_prefix = True to project().'),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"short_path"},"short_path"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"short_path: str.type\n")),(0,n.mdx)("p",null,"The interesting part of the path, relative to somewhere in the output directory. For an artifact declared as ",(0,n.mdx)("inlineCode",{parentName:"p"},"foo/bar"),", this is ",(0,n.mdx)("inlineCode",{parentName:"p"},"foo/bar"),"."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"without_associated_artifacts"},"without_associated_artifacts"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def without_associated_artifacts() -> "artifact"\n')))}d.isMDXComponent=!0}}]);