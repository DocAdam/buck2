"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6942],{3905:(e,n,r)=>{r.r(n),r.d(n,{MDXContext:()=>p,MDXProvider:()=>c,mdx:()=>y,useMDXComponents:()=>m,withMDXComponents:()=>s});var a=r(67294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},l.apply(this,arguments)}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var p=a.createContext({}),s=function(e){return function(n){var r=m(n.components);return a.createElement(e,l({},n,{components:r}))}},m=function(e){var n=a.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=m(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",v={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,l=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=m(r),c=t,u=s["".concat(o,".").concat(c)]||s[c]||v[c]||l;return r?a.createElement(u,i(i({ref:n},p),{},{components:r})):a.createElement(u,i({ref:n},p))}));function y(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var l=r.length,o=new Array(l);o[0]=f;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[u]="string"==typeof e?e:t,o[1]=i;for(var p=2;p<l;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},75002:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=r(87462),t=(r(67294),r(3905));const l={},o="TemplatePlaceholderInfo",i={unversionedId:"generated/native/providers/TemplatePlaceholderInfo",id:"generated/native/providers/TemplatePlaceholderInfo",title:"TemplatePlaceholderInfo",description:"A provider that is used for expansions in string attribute templates",source:"@site/../docs/generated/native/providers/TemplatePlaceholderInfo.md",sourceDirName:"generated/native/providers",slug:"/generated/native/providers/TemplatePlaceholderInfo",permalink:"/docs/generated/native/providers/TemplatePlaceholderInfo",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"RunInfo",permalink:"/docs/generated/native/providers/RunInfo"},next:{title:"dict",permalink:"/docs/generated/native/standard/dict"}},d={},p=[{value:"keyed_variables",id:"keyed_variables",level:2},{value:"unkeyed_variables",id:"unkeyed_variables",level:2}],s={toc:p};function m(e){let{components:n,...r}=e;return(0,t.mdx)("wrapper",(0,a.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,t.mdx)("h1",{id:"templateplaceholderinfo"},"TemplatePlaceholderInfo"),(0,t.mdx)("p",null,"A provider that is used for expansions in string attribute templates"),(0,t.mdx)("p",null,'String attribute templates allow two types of user-defined placeholders, "unkeyed placeholders"\nlike ',(0,t.mdx)("inlineCode",{parentName:"p"},"$(CXX)")," or ",(0,t.mdx)("inlineCode",{parentName:"p"},"$(aapt)"),' and "keyed placeholders"  that include a target key like\n',(0,t.mdx)("inlineCode",{parentName:"p"},"$(cxxppflags //some:target)"),". The expansion of each of these types is based on the\n",(0,t.mdx)("inlineCode",{parentName:"p"},"TemplatePlaceholderInfo")," providers."),(0,t.mdx)("p",null,'"keyed placeholders" are used for the form ',(0,t.mdx)("inlineCode",{parentName:"p"},"$(<key> <target>)")," or ",(0,t.mdx)("inlineCode",{parentName:"p"},"$(<key> <target> <arg>)"),". In both cases\nthe lookup will expect a ",(0,t.mdx)("inlineCode",{parentName:"p"},"TemplatePlaceholderInfo")," in the providers of ",(0,t.mdx)("inlineCode",{parentName:"p"},"<target>"),". It will then lookup\n",(0,t.mdx)("inlineCode",{parentName:"p"},"<key>")," in the keyed_variables (call this the ",(0,t.mdx)("inlineCode",{parentName:"p"},"value"),"). There are then four valid possibilities:"),(0,t.mdx)("ol",null,(0,t.mdx)("li",{parentName:"ol"},"no-arg placeholder, an arg-like ",(0,t.mdx)("inlineCode",{parentName:"li"},"value"),": resolve to ",(0,t.mdx)("inlineCode",{parentName:"li"},"value")),(0,t.mdx)("li",{parentName:"ol"},"no-arg placeholder, a dictionary ",(0,t.mdx)("inlineCode",{parentName:"li"},"value"),": resolve to ",(0,t.mdx)("inlineCode",{parentName:"li"},'value["DEFAULT"]')),(0,t.mdx)("li",{parentName:"ol"},"arg placeholder, a non-dictionary ",(0,t.mdx)("inlineCode",{parentName:"li"},"value"),": this is an error"),(0,t.mdx)("li",{parentName:"ol"},"arg placeholder, a dictionary ",(0,t.mdx)("inlineCode",{parentName:"li"},"value"),": resolve to ",(0,t.mdx)("inlineCode",{parentName:"li"},"value[<arg>]"))),(0,t.mdx)("p",null,'"unkeyed placeholders" are resolved by matching to any of the deps of the target. ',(0,t.mdx)("inlineCode",{parentName:"p"},"$(CXX)"),' will resolve\nto the "CXX" value in any dep\'s ',(0,t.mdx)("inlineCode",{parentName:"p"},"TemplateProviderInfo.unkeyed_variables")),(0,t.mdx)("p",null,"Fields:"),(0,t.mdx)("ul",null,(0,t.mdx)("li",{parentName:"ul"},'unkeyed_variables: A mapping of names to arg-like values. These are used for "unkeyed placeholder" expansion.'),(0,t.mdx)("li",{parentName:"ul"},'keyed_variables: A mapping of names to arg-like values or dictionary of string to\narg-like values. These are used for "keyed placeholder" expansion.')),(0,t.mdx)("h2",{id:"keyed_variables"},"keyed_variables"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-python"},'keyed_variables: ""\n')),(0,t.mdx)("hr",null),(0,t.mdx)("h2",{id:"unkeyed_variables"},"unkeyed_variables"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-python"},'unkeyed_variables: ""\n')))}m.isMDXComponent=!0}}]);