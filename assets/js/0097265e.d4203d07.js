"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4041],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>u,MDXProvider:()=>f,mdx:()=>v,useMDXComponents:()=>p,withMDXComponents:()=>c});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){return function(n){var t=p(n.components);return r.createElement(e,i({},n,{components:t}))}},p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},f=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),f=o,d=c["".concat(a,".").concat(f)]||c[f]||m[f]||i;return t?r.createElement(d,s(s({ref:n},u),{},{components:t})):r.createElement(d,s({ref:n},u))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},21137:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(87462),o=(t(67294),t(3905));const i={id:"ConfigurationInfo"},a="ConfigurationInfo",s={unversionedId:"api/build/providers/ConfigurationInfo",id:"api/build/providers/ConfigurationInfo",title:"ConfigurationInfo",description:'Provider that signals that a rule contains configuration info. This is used both as part of defining configurations (platform(), constraintvalue()) and defining whether a target "matches" a configuration or not (configsetting(), constraint_value())',source:"@site/../docs/api/build/providers/ConfigurationInfo.generated.md",sourceDirName:"api/build/providers",slug:"/api/build/providers/ConfigurationInfo",permalink:"/docs/api/build/providers/ConfigurationInfo",draft:!1,tags:[],version:"current",frontMatter:{id:"ConfigurationInfo"},sidebar:"manualSidebar",previous:{title:"promise",permalink:"/docs/api/build/promise"},next:{title:"ConstraintSettingInfo",permalink:"/docs/api/build/providers/ConstraintSettingInfo"}},l={},u=[{value:"constraints",id:"constraints",level:2},{value:"values",id:"values",level:2}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,o.mdx)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"configurationinfo"},"ConfigurationInfo"),(0,o.mdx)("p",null,"Provider that signals that a rule contains configuration info. This is used both as part of defining configurations (",(0,o.mdx)("inlineCode",{parentName:"p"},"platform()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"constraint_value()"),') and defining whether a target "matches" a configuration or not (',(0,o.mdx)("inlineCode",{parentName:"p"},"config_setting()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"constraint_value()"),")"),(0,o.mdx)("h2",{id:"constraints"},"constraints"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'constraints: {"target_label": "ConstraintValueInfo"}\n')),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"values"},"values"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"values: {str.type: str.type}\n")))}p.isMDXComponent=!0}}]);