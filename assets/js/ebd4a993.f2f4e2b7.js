"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[984],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>p,MDXProvider:()=>u,mdx:()=>h,useMDXComponents:()=>c,withMDXComponents:()=>d});var a=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},n.apply(this,arguments)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=a.createContext({}),d=function(e){return function(t){var r=c(t.components);return a.createElement(e,n({},t,{components:r}))}},c=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},x=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(r),u=i,m=d["".concat(l,".").concat(u)]||d[u]||f[u]||n;return r?a.createElement(m,s(s({ref:t},p),{},{components:r})):a.createElement(m,s({ref:t},p))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,l=new Array(n);l[0]=x;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:i,l[1]=s;for(var p=2;p<n;p++)l[p]=r[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}x.displayName="MDXCreateElement"},18036:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>n,metadata:()=>s,toc:()=>p});var a=r(87462),i=(r(67294),r(3905));const n={id:"fs"},l="fs",s={unversionedId:"api/bxl/fs",id:"api/bxl/fs",title:"fs",description:"Provides some basic tracked filesystem access for bxl functions so that they can meaningfully detect simple properties of artifacts, and source directories.",source:"@site/../docs/api/bxl/fs.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/fs",permalink:"/docs/api/bxl/fs",draft:!1,tags:[],version:"current",frontMatter:{id:"fs"},sidebar:"manualSidebar",previous:{title:"ensured_artifact_group",permalink:"/docs/api/bxl/ensured_artifact_group"},next:{title:"get_path_without_materialization",permalink:"/docs/api/bxl/get_path_without_materialization"}},o={},p=[{value:"exists",id:"exists",level:2},{value:"Details",id:"details",level:4},{value:"is_dir",id:"is_dir",level:2},{value:"Details",id:"details-1",level:4},{value:"is_file",id:"is_file",level:2},{value:"Details",id:"details-2",level:4},{value:"list",id:"list",level:2},{value:"Details",id:"details-3",level:4}],d={toc:p};function c(e){let{components:t,...r}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"fs"},"fs"),(0,i.mdx)("p",null,"Provides some basic tracked filesystem access for bxl functions so that they can meaningfully detect simple properties of artifacts, and source directories."),(0,i.mdx)("h2",{id:"exists"},"exists"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def exists(expr: [str.type, "artifact"]) -> bool.type\n')),(0,i.mdx)("p",null,"Check if a path exists on disk, taking advantage of Buck's cached filesystem. Takes in a literal, a source artifact (via ",(0,i.mdx)("inlineCode",{parentName:"p"},"[StarlarkArtifact]"),"), or a ",(0,i.mdx)("inlineCode",{parentName:"p"},"[StarlarkFileNode]"),"."),(0,i.mdx)("h4",{id:"details"},"Details"),(0,i.mdx)("p",null,"Sample usage:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_exists(ctx):\n    ctx.output.print(ctx.fs.exists("bin"))\n')),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"is_dir"},"is_dir"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def is_dir(expr: [str.type, "artifact"]) -> bool.type\n')),(0,i.mdx)("p",null,"Returns whether the provided path is a dir. Returns false is the dir does not exist. The input is a either a literal, a source artifact (via ",(0,i.mdx)("inlineCode",{parentName:"p"},"[StarlarkArtifact]"),"), or a ",(0,i.mdx)("inlineCode",{parentName:"p"},"[StarlarkFileNode]"),"."),(0,i.mdx)("h4",{id:"details-1"},"Details"),(0,i.mdx)("p",null,"Sample usage:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_is_dir(ctx):\n    ctx.output.print(ctx.fs.is_dir("bin"))\n')),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"is_file"},"is_file"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def is_file(expr: [str.type, "artifact"]) -> bool.type\n')),(0,i.mdx)("p",null,"Returns whether the provided path is a file. Returns false is the file does not exist. The input is a either a literal, a source artifact (via ",(0,i.mdx)("inlineCode",{parentName:"p"},"[StarlarkArtifact]"),"), or a ",(0,i.mdx)("inlineCode",{parentName:"p"},"[StarlarkFileNode]"),"."),(0,i.mdx)("h4",{id:"details-2"},"Details"),(0,i.mdx)("p",null,"Sample usage:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_is_file(ctx):\n    ctx.output.print(ctx.fs.is_dir("bin"))\n')),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"list"},"list"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def list(expr: [str.type, "artifact"], *, dirs_only: bool.type = None) -> "read_dir_set"\n')),(0,i.mdx)("p",null,"Returns all the contents of the given input that points to a directory. Errors if the given path is a file. Takes an optional boolean ",(0,i.mdx)("inlineCode",{parentName:"p"},"dirs_only")," to only return directories, defaults to false."),(0,i.mdx)("h4",{id:"details-3"},"Details"),(0,i.mdx)("p",null,"The input is a either a literal, a source artifact (via ",(0,i.mdx)("inlineCode",{parentName:"p"},"[StarlarkArtifact]"),"), or a ",(0,i.mdx)("inlineCode",{parentName:"p"},"[StarlarkFileNode]"),"."),(0,i.mdx)("p",null,"Sample usage:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_list(ctx):\n    list_results = ctx.fs.list("bin")\n    for result in list_results:\n        ctx.output.print(result)\n')))}c.isMDXComponent=!0}}]);