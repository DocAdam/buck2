"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3890],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>u,mdx:()=>x,useMDXComponents:()=>c,withMDXComponents:()=>p});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){return function(t){var n=c(t.components);return a.createElement(e,l({},t,{components:n}))}},c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,m=p["".concat(d,".").concat(u)]||p[u]||f[u]||l;return n?a.createElement(m,i(i({ref:t},s),{},{components:n})):a.createElement(m,i({ref:t},s))}));function x(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,d=new Array(l);d[0]=h;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[m]="string"==typeof e?e:r,d[1]=i;for(var s=2;s<l;s++)d[s]=n[s];return a.createElement.apply(null,d)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},94679:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={},d="cmd_args",i={unversionedId:"generated/native/cmd_args",id:"generated/native/cmd_args",title:"cmd_args",description:"The cmdargs type is created by cmdargs() and is consumed by ctx.actions.run. The type is a mutable collection of strings and artifact values. In general, command lines, artifacts, strings, RunInfo and lists thereof can be added to or used to construct a `cmd_args value. All these methods operate mutably on cmd and return that value too.",source:"@site/../docs/generated/native/cmd_args.md",sourceDirName:"generated/native",slug:"/generated/native/cmd_args",permalink:"/docs/generated/native/cmd_args",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"builtins",permalink:"/docs/generated/native/builtins"},next:{title:"ctx.actions",permalink:"/docs/generated/native/ctx.actions"}},o={},s=[{value:"absolute_prefix",id:"absolute_prefix",level:2},{value:"absolute_suffix",id:"absolute_suffix",level:2},{value:"add",id:"add",level:2},{value:"copy",id:"copy",level:2},{value:"hidden",id:"hidden",level:2},{value:"ignore_artifacts",id:"ignore_artifacts",level:2},{value:"inputs",id:"inputs",level:2},{value:"outputs",id:"outputs",level:2},{value:"parent",id:"parent",level:2},{value:"Details",id:"details",level:4},{value:"relative_to",id:"relative_to",level:2},{value:"replace_regex",id:"replace_regex",level:2}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"cmd_args"},"cmd_args"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"cmd_args")," type is created by ",(0,r.mdx)("inlineCode",{parentName:"p"},"cmd_args()")," and is consumed by ",(0,r.mdx)("inlineCode",{parentName:"p"},"ctx.actions.run"),". The type is a mutable collection of strings and ",(0,r.mdx)("inlineCode",{parentName:"p"},"artifact")," values. In general, command lines, artifacts, strings, ",(0,r.mdx)("inlineCode",{parentName:"p"},"RunInfo")," and lists thereof can be added to or used to construct a `",(0,r.mdx)("inlineCode",{parentName:"p"},"cmd_args")," value. All these methods operate mutably on ",(0,r.mdx)("inlineCode",{parentName:"p"},"cmd")," and return that value too."),(0,r.mdx)("h2",{id:"absolute_prefix"},"absolute_prefix"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def absolute_prefix(prefix: str.type) -> ""\n')),(0,r.mdx)("p",null,"Adds a prefix to the end of every artifact"),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"absolute_suffix"},"absolute_suffix"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def absolute_suffix(suffix: str.type) -> ""\n')),(0,r.mdx)("p",null,"Adds a suffix to the front of every artifact"),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"add"},"add"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def add(*args) -> ""\n')),(0,r.mdx)("p",null,"A list of arguments to be added to the command line, as per ",(0,r.mdx)("inlineCode",{parentName:"p"},"cmd_args")),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"copy"},"copy"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def copy() -> "cmd_args"\n')),(0,r.mdx)("p",null,"Returns a copy of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"cmd_args")," such that any modifications to the original or the returned value will not impact each other"),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"hidden"},"hidden"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def hidden(*args) -> ""\n')),(0,r.mdx)("p",null,"Things to add to the command line which do not show up but are added as dependencies"),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"ignore_artifacts"},"ignore_artifacts"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def ignore_artifacts() -> ""\n')),(0,r.mdx)("p",null,"Conceptually the opposite of ",(0,r.mdx)("inlineCode",{parentName:"p"},"hidden()"),". It causes none of the arguments of the command line to be added as dependencies. Use this if you need the path to an artifact but not the artifact itself. Note: if you do find yourself needing any of the inputs referenced by this command, you will hit build errors due to missing dependencies."),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"inputs"},"inputs"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'inputs: "command_line_inputs"\n')),(0,r.mdx)("p",null,"Collect all the inputs (including hidden) referenced by this command line."),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"outputs"},"outputs"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'outputs: ["output_artifact"]\n')),(0,r.mdx)("p",null,"Collect all the outputs (including hidden) referenced by this command line."),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"parent"},"parent"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def parent(count: int.type = None) -> ""\n')),(0,r.mdx)("p",null,"For all the artifacts listed in this ",(0,r.mdx)("inlineCode",{parentName:"p"},"cmd_args"),", use their parent directory."),(0,r.mdx)("h4",{id:"details"},"Details"),(0,r.mdx)("p",null,"Typically used when the file name is passed one way, and the directory another,\ne.g. ",(0,r.mdx)("inlineCode",{parentName:"p"},'cmd_args(artifact, format="-L{}").parent()'),"."),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"relative_to"},"relative_to"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def relative_to(directory: "", parent: int.type = None) -> ""\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"replace_regex"},"replace_regex"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def replace_regex(pattern: str.type, replacement: str.type) -> ""\n')),(0,r.mdx)("p",null,"Replaces all parts matching pattern regular expression in each argument with replacement string. Several replacements can be added by multiple replace_regex calls."))}c.isMDXComponent=!0}}]);